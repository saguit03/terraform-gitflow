name: 'Terraform Called'

on:
  workflow_call:
    inputs:
      env-type:
        required: true
        type: string
  pull_request:
    branches:
      - release/*
      - main

jobs:
  terraform:
    name: Checking Terraform
    runs-on: ubuntu-latest
    environment: ${{ inputs.env-type }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
            # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
  
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt

      - name: Terraform Validate
        run: terraform validate
  
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: echo "AWS credentials are needed to run terraform plan -input=false"
      
      - name: Aplicar cambios en entorno ${{ inputs.env-type }}
        run: echo "terraform apply -auto-approve"

  rollback:
    needs: terraform
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Clonar el repositorio con acceso de escritura
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configurar Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
      - name: Inicializar Terraform
        run: terraform init
      - name: Rollback con Terraform
        run: echo "terraform apply -auto-approve tfplan.rollback || terraform destroy -auto-approve"
    
      - name: Configurar Git con identidad
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Asegurar que hay historial de commits
        run: |
          git fetch --unshallow || echo "Repo ya tiene historial completo"

      - name: Revertir el último commit fallido
        run: |
          git fetch origin actions
          git checkout actions
          git reset --hard HEAD~1
          git push --force origin actions 
  block-merge-if-fail:
      needs: rollback
      runs-on: ubuntu-latest
      if:
      steps:
        - name: Bloquear Merge
          run: |
            echo "❌ Error en Terraform, se ha vuelto atrás. PR bloqueado."
            exit 1
            